{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Main JavaScript for INTEB Chat module\r\n *\r\n * @module     mod_intebchat/lib\r\n * @copyright  2025 Alonso Arias <soporte@ingeweb.co>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification'], function($, Ajax, Str, Notification) {\r\n    var questionString = 'Ask a question...';\r\n    var errorString = 'An error occurred! Please try again later.';\r\n    var chatData = {};\r\n    var tokenInfo = {\r\n        enabled: false,\r\n        limit: 0,\r\n        used: 0,\r\n        exceeded: false,\r\n        resetTime: 0\r\n    };\r\n\r\n    /**\r\n     * Initialize the module\r\n     * @param {Object} data Configuration data\r\n     */\r\n    var init = function(data) {\r\n        var instanceId = data.instanceId;\r\n        var api_type = data.api_type;\r\n        var persistConvo = data.persistConvo;\r\n        \r\n        // Initialize token info\r\n        tokenInfo.enabled = data.tokenLimitEnabled || false;\r\n        tokenInfo.limit = data.tokenLimit || 0;\r\n        tokenInfo.used = data.tokensUsed || 0;\r\n        tokenInfo.exceeded = data.tokenLimitExceeded || false;\r\n        tokenInfo.resetTime = data.resetTime || 0;\r\n\r\n        // Initialize local data storage if necessary\r\n        if (api_type === 'assistant') {\r\n            chatData = localStorage.getItem(\"mod_intebchat_data\");\r\n            if (chatData) {\r\n                chatData = JSON.parse(chatData);\r\n                if (chatData[instanceId] && chatData[instanceId]['threadId'] && persistConvo === \"1\") {\r\n                    $.ajax({\r\n                        url: M.cfg.wwwroot + '/mod/intebchat/api/thread.php?thread_id=' + chatData[instanceId]['threadId'],\r\n                        type: 'GET',\r\n                        dataType: 'json',\r\n                        success: function(data) {\r\n                            for (var i = 0; i < data.length; i++) {\r\n                                addToChatLog(data[i].role === 'user' ? 'user' : 'bot', data[i].message, instanceId);\r\n                            }\r\n                        },\r\n                        error: function() {\r\n                            // Reset thread if error\r\n                            chatData[instanceId] = {};\r\n                            localStorage.setItem(\"mod_intebchat_data\", JSON.stringify(chatData));\r\n                        }\r\n                    });\r\n                } else {\r\n                    chatData[instanceId] = {};\r\n                }\r\n            } else {\r\n                chatData = {[instanceId]: {}};\r\n            }\r\n            localStorage.setItem(\"mod_intebchat_data\", JSON.stringify(chatData));\r\n        }\r\n\r\n        // Update UI based on token limit status\r\n        updateTokenUI();\r\n\r\n        // Event listeners\r\n        $(document).on('keyup', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n            if (e.which === 13 && !e.shiftKey && e.target.value !== \"\") {\r\n                e.preventDefault();\r\n                if (!tokenInfo.exceeded) {\r\n                    addToChatLog('user', e.target.value, instanceId);\r\n                    createCompletion(e.target.value, instanceId, api_type);\r\n                    e.target.value = '';\r\n                }\r\n            }\r\n        });\r\n\r\n        $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #go', function(e) {\r\n            var input = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input');\r\n            if (input.val() !== \"\" && !tokenInfo.exceeded) {\r\n                addToChatLog('user', input.val(), instanceId);\r\n                createCompletion(input.val(), instanceId, api_type);\r\n                input.val('');\r\n            }\r\n        });\r\n\r\n        $(document).on('click', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #refresh', function(e) {\r\n            clearHistory(instanceId);\r\n        });\r\n\r\n        // Auto-resize textarea\r\n        $(document).on('input', '.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input', function(e) {\r\n            this.style.height = 'auto';\r\n            this.style.height = (this.scrollHeight) + 'px';\r\n        });\r\n\r\n        // Load strings\r\n        var strings = [\r\n            {\r\n                key: 'askaquestion',\r\n                component: 'mod_intebchat'\r\n            },\r\n            {\r\n                key: 'erroroccurred',\r\n                component: 'mod_intebchat'\r\n            },\r\n        ];\r\n        Str.get_strings(strings).then(function(results) {\r\n            questionString = results[0];\r\n            errorString = results[1];\r\n        });\r\n\r\n        // Check token limit periodically if enabled\r\n        if (tokenInfo.enabled) {\r\n            setInterval(checkTokenReset, 60000); // Check every minute\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update UI based on token limit status\r\n     */\r\n    var updateTokenUI = function() {\r\n        if (!tokenInfo.enabled) {\r\n            return;\r\n        }\r\n\r\n        var $container = $('.mod_intebchat');\r\n        var $input = $container.find('#openai_input');\r\n        var $submitBtn = $container.find('#go');\r\n        var $progressBar = $container.find('.progress-bar');\r\n\r\n        if (tokenInfo.exceeded) {\r\n            $input.prop('disabled', true);\r\n            $submitBtn.prop('disabled', true);\r\n        } else {\r\n            $input.prop('disabled', false);\r\n            $submitBtn.prop('disabled', false);\r\n        }\r\n\r\n        // Update progress bar\r\n        if ($progressBar.length) {\r\n            var percentage = (tokenInfo.used / tokenInfo.limit * 100);\r\n            $progressBar.css('width', percentage + '%');\r\n            \r\n            // Update color based on usage\r\n            if (percentage > 90) {\r\n                $progressBar.css('background', 'linear-gradient(135deg, #e53e3e 0%, #c53030 100%)');\r\n            } else if (percentage > 75) {\r\n                $progressBar.css('background', 'linear-gradient(135deg, #dd6b20 0%, #c05621 100%)');\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if token limit has reset\r\n     */\r\n    var checkTokenReset = function() {\r\n        var now = Date.now() / 1000;\r\n        if (tokenInfo.exceeded && now > tokenInfo.resetTime) {\r\n            // Reload page to refresh token status\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add a message to the chat UI\r\n     * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n     * @param {string} message The text of the message to add\r\n     * @param {int} instanceId The ID of the instance to manipulate\r\n     */\r\n    var addToChatLog = function(type, message, instanceId) {\r\n        var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n        \r\n        var messageElem = $('<div></div>').addClass('openai_message').addClass(type);\r\n        var messageText = $('<span></span>').html(message);\r\n        messageElem.append(messageText);\r\n\r\n        // Add timestamp\r\n        var timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        var timestampElem = $('<span></span>').addClass('message-timestamp').text(timestamp);\r\n        messageElem.append(timestampElem);\r\n\r\n        messageContainer.append(messageElem);\r\n        \r\n        // Smooth scroll to bottom\r\n        messageContainer.animate({\r\n            scrollTop: messageContainer[0].scrollHeight\r\n        }, 300);\r\n    };\r\n\r\n    /**\r\n     * Clears the thread ID from local storage and removes the messages from the UI\r\n     * @param {int} instanceId\r\n     */\r\n    var clearHistory = function(instanceId) {\r\n        chatData = localStorage.getItem(\"mod_intebchat_data\");\r\n        if (chatData) {\r\n            chatData = JSON.parse(chatData);\r\n            if (chatData[instanceId]) {\r\n                chatData[instanceId] = {};\r\n                localStorage.setItem(\"mod_intebchat_data\", JSON.stringify(chatData));\r\n            }\r\n        }\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log').html(\"\");\r\n    };\r\n\r\n    /**\r\n     * Makes an API request to get a completion from GPT\r\n     * @param {string} message The text to get a completion for\r\n     * @param {int} instanceId The ID of the instance\r\n     * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n     */\r\n    var createCompletion = function(message, instanceId, api_type) {\r\n        var threadId = null;\r\n        \r\n        // If the type is assistant, attempt to fetch a thread ID\r\n        if (api_type === 'assistant') {\r\n            chatData = localStorage.getItem(\"mod_intebchat_data\");\r\n            if (chatData) {\r\n                chatData = JSON.parse(chatData);\r\n                if (chatData[instanceId]) {\r\n                    threadId = chatData[instanceId]['threadId'] || null;\r\n                }\r\n            } else {\r\n                chatData = {[instanceId]: {}};\r\n            }\r\n        }  \r\n\r\n        var history = buildTranscript(instanceId);\r\n\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').addClass('disabled');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').removeClass('error');\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', questionString);\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').blur();\r\n        addToChatLog('bot loading', '...', instanceId);\r\n\r\n        $.ajax({\r\n            url: M.cfg.wwwroot + '/mod/intebchat/api/completion.php',\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                message: message,\r\n                history: history,\r\n                instanceId: instanceId,\r\n                threadId: threadId\r\n            }),\r\n            success: function(data) {\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                messageContainer.children().last().remove();\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n\r\n                if (data.message) {\r\n                    addToChatLog('bot', data.message, instanceId);\r\n                    if (data.thread_id) {\r\n                        chatData[instanceId]['threadId'] = data.thread_id;\r\n                        localStorage.setItem(\"mod_intebchat_data\", JSON.stringify(chatData));\r\n                    }\r\n                    \r\n                    // Update token usage if provided\r\n                    if (data.tokenInfo && tokenInfo.enabled) {\r\n                        tokenInfo.used += data.tokenInfo.total || 0;\r\n                        updateTokenUI();\r\n                        \r\n                        // Check if limit exceeded\r\n                        if (tokenInfo.used >= tokenInfo.limit) {\r\n                            tokenInfo.exceeded = true;\r\n                            updateTokenUI();\r\n                            Notification.addNotification({\r\n                                message: M.util.get_string('tokenlimitexceeded', 'mod_intebchat'),\r\n                                type: 'error'\r\n                            });\r\n                        }\r\n                    }\r\n                } else if (data.error) {\r\n                    if (data.error.type === 'token_limit_exceeded') {\r\n                        tokenInfo.exceeded = true;\r\n                        updateTokenUI();\r\n                        Notification.addNotification({\r\n                            message: data.error.message,\r\n                            type: 'error'\r\n                        });\r\n                    } else {\r\n                        addToChatLog('bot error', data.error.message, instanceId);\r\n                    }\r\n                }\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').focus();\r\n            },\r\n            error: function(xhr, status, error) {\r\n                var messageContainer = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #intebchat_log');\r\n                messageContainer.children().last().remove();\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #control_bar').removeClass('disabled');\r\n                \r\n                var errorMsg = errorString;\r\n                try {\r\n                    var response = JSON.parse(xhr.responseText);\r\n                    if (response.error) {\r\n                        errorMsg = response.error;\r\n                    }\r\n                } catch (e) {\r\n                    // Use default error message\r\n                }\r\n                \r\n                addToChatLog('bot error', errorMsg, instanceId);\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').addClass('error');\r\n                $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] #openai_input').attr('placeholder', errorString);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n     * @param {int} instanceId The instance from which to build the history\r\n     * @return {Array} A transcript of the conversation up to this point\r\n     */\r\n    var buildTranscript = function(instanceId) {\r\n        var transcript = [];\r\n        $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message').each(function(index, element) {\r\n            var messages = $('.mod_intebchat[data-instance-id=\"' + instanceId + '\"] .openai_message');\r\n            if (index === messages.length - 1) {\r\n                return;\r\n            }\r\n\r\n            var user = userName;\r\n            if ($(element).hasClass('bot')) {\r\n                user = assistantName;\r\n            }\r\n            \r\n            // Remove timestamp from message text\r\n            var messageText = $(element).clone();\r\n            messageText.find('.message-timestamp').remove();\r\n            \r\n            transcript.push({\"user\": user, \"message\": messageText.text().trim()});\r\n        });\r\n\r\n        return transcript;\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});"],"names":["define","$","Ajax","Str","Notification","questionString","errorString","chatData","tokenInfo","enabled","limit","used","exceeded","resetTime","updateTokenUI","$container","$input","find","$submitBtn","$progressBar","prop","length","percentage","css","checkTokenReset","now","Date","window","location","reload","addToChatLog","type","message","instanceId","messageContainer","messageElem","addClass","messageText","html","append","timestamp","toLocaleTimeString","hour","minute","timestampElem","text","animate","scrollTop","scrollHeight","clearHistory","localStorage","getItem","JSON","parse","setItem","stringify","createCompletion","api_type","threadId","history","buildTranscript","removeClass","attr","blur","ajax","url","M","cfg","wwwroot","dataType","contentType","data","success","children","last","remove","thread_id","total","addNotification","util","get_string","error","focus","xhr","status","errorMsg","response","responseText","e","transcript","each","index","element","user","userName","hasClass","assistantName","clone","push","trim","init","persistConvo","tokenLimitEnabled","tokenLimit","tokensUsed","tokenLimitExceeded","i","role","document","on","which","shiftKey","target","value","preventDefault","input","val","style","height","this","get_strings","key","component","then","results","setInterval"],"mappings":"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"}